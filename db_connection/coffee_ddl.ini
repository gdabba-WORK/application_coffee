[name]
database_name = coffee

[user]
user_sql = GRANT all ON coffee.* TO 'user_coffee'@'localhost' IDENTIFIED BY 'rootroot'

[sql]
product =
    CREATE TABLE product (
    code CHAR(4) NOT NULL,
    name VARCHAR(20) NULL,
    PRIMARY KEY (code))

sale =
    CREATE TABLE sale (
    no  INT(11) AUTO_INCREMENT,
    code    CHAR(4) NOT NULL,
    price   INT(11) NOT NULL,
    saleCnt INT(11) NOT NULL,
    marginRate  INT(11) NOT NULL,
    PRIMARY KEY(no),
    FOREIGN KEY(code) REFERENCES product(code)
    ON DELETE CASCADE)

sale_detail =
    CREATE TABLE sale_detail (
	no				INT(11) NOT NULL,
	salePrice		INT(11) NOT NULL,
	addTax			INT(11) NOT NULL,
	supplyPrice	INT(11) NOT NULL,
	marginPrice	INT(11) NOT NULL,
	FOREIGN KEY (no) REFERENCES sale (no)
	ON DELETE CASCADE)

[trigger]
tri_sale_after_insert_detail =
    CREATE TRIGGER tri_sale_after_insert_detail
    AFTER INSERT ON sale
    FOR EACH ROW
    BEGIN
        set @saleprice = new.price * new.salecnt,
            @addtax = ceil(@saleprice/11),
            @supprice = @saleprice - @addtax,
            @marPrice = round(@supprice * (new.marginrate/100));
        INSERT INTO sale_detail(no, salePrice, addTax, supplyPrice, marginPrice)
            VALUES(new.no, @saleprice, @addtax, @supprice, @marPrice);
    END

tri_sale_after_update_detail =
    CREATE TRIGGER tri_sale_after_update_detail
    AFTER UPDATE ON sale
    FOR EACH ROW
    BEGIN
        set @saleprice = new.price * new.salecnt,
            @addtax = ceil(@saleprice/11),
            @supprice = @saleprice - @addtax,
            @marPrice = round(@supprice * (new.marginrate/100));
        UPDATE sale_detail
            SET salePrice=@saleprice, addTax=@addtax, supplyPrice=@supprice, marginPrice=@marPrice
            where no = new.no;
    END

[procedure]
proc_sale_stat =
    CREATE PROCEDURE proc_sale_stat()
    BEGIN
        select
            sum(@saleprice := price*salecnt) salePrice,
            sum(@addtax := ceil(@saleprice/11)) addtax_price,
            sum(@supprice := @saleprice - @addtax) supplyPrice,
            sum(@marPrice := round(@supprice * (marginrate/100))) marginPrice
        from sale s join product p on s.code = p.code;
    END

proc_saledetail_orderby =
    CREATE PROCEDURE proc_saledetail_orderby (in isSalePrice boolean)
    BEGIN
        IF isSalePrice THEN
            SELECT (SELECT COUNT(*)+1 FROM sale_detail s2 where s2.salePrice > s1.salePrice) rank,
                sale.code code, p.name name, price, salecnt, supplyPrice, addTax,
                salePrice, marginRate, marginPrice
            FROM sale INNER JOIN sale_detail s1 ON sale.no = s1.no JOIN product p ON sale.code = p.code
                ORDER BY rank;
        ELSE
            SELECT (SELECT COUNT(*)+1 FROM sale_detail s2 where s2.marginPrice > s1.marginPrice) rank,
                sale.code code, p.name name, price, salecnt, supplyPrice, addTax,
                salePrice, marginRate, marginPrice
            FROM sale INNER JOIN sale_detail s1 ON sale.no = s1.no JOIN product p ON sale.code = p.code
                ORDER BY rank;
        END IF;
    END

[backup]
product =
	select *from product
	into OUTFILE '/home/gdabba/PycharmProjects/application_coffee/data/product.txt'
	character set 'UTF8'
	fields TERMINATED by ','
	LINES terminated by '\n'

sale =
    select *from sale
	into OUTFILE '/home/gdabba/PycharmProjects/application_coffee/data/sale.txt'
	character set 'UTF8'
	fields TERMINATED by ','
	LINES terminated by '\n'

[restore]
product =
	LOAD DATA INFILE '/home/gdabba/PycharmProjects/application_coffee/data/product.txt'
	INTO table product
	character set 'UTF8'
	fields TERMINATED by ','
	LINES TERMINATED by '\n'

sale =
	LOAD DATA INFILE '/home/gdabba/PycharmProjects/application_coffee/data/sale.txt'
	INTO table sale
	character set 'UTF8'
	fields TERMINATED by ','
	LINES TERMINATED by '\n'
